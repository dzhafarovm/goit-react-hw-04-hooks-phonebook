{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/ContactForm/ContactForm.module.css","Components/ContactForm/ContactForm.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameId","useRef","shortid","generate","numberId","handleContactChange","e","target","value","preventDefault","className","css","form","htmlFor","current","label","type","id","onChange","pattern","title","required","btn","ContactList","contacts","onDeleteContact","map","onClick","Filter","onFilterInputValue","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","data","contact","find","con","toLowerCase","toast","icon","style","borderRadius","background","color","sort","a","b","localeCompare","includes","contactId","position","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95c700d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__36u9a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__38qbu\",\"name\":\"ContactForm_name__3OAgI\",\"number\":\"ContactForm_number__QQJe4\",\"btn\":\"ContactForm_btn__1isB9\"};","import { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport css from './ContactForm.module.css';\r\n\r\nexport const ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameId = useRef(shortid.generate());\r\n  const numberId = useRef(shortid.generate());\r\n\r\n  const handleContactChange = e => {\r\n    switch (e.target.name) {\r\n      case 'name':\r\n        setName(e.target.value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(e.target.value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit} className={css.form}>\r\n        <label htmlFor={nameId.current} className={css.label}>\r\n          Name:\r\n          <input\r\n            className={css.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            id={nameId.current}\r\n            onChange={handleContactChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <br />\r\n\r\n        <label htmlFor={numberId.current} className={css.label}>\r\n          Number:\r\n          <input\r\n            className={css.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            id={numberId.current}\r\n            onChange={handleContactChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <br />\r\n\r\n        <button type=\"submit\" className={css.btn}>\r\n          add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport css from './ContactList.module.css';\r\n\r\nexport const ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          <span>{name}: </span>\r\n          <span>{number}</span>\r\n          <button className={css.btn} onClick={() => onDeleteContact(id)}>\r\n            delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Filter = ({ value, onFilterInputValue }) => {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onFilterInputValue} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onFilterInputValue: PropTypes.func.isRequired,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport shortid from 'shortid';\r\nimport { ContactForm } from './Components/ContactForm/ContactForm.jsx';\r\nimport { ContactList } from './Components/ContactList/ContactList.jsx';\r\nimport { Filter } from './Components/Filter/Filter.jsx';\r\n\r\nexport const App = () => {\r\n  const [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(localStorage.getItem('myContacts') ?? []);\r\n  });\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('myContacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const addContact = data => {\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name: data.name,\r\n      number: data.number,\r\n    };\r\n\r\n    if (\r\n      contacts.find(\r\n        con => con.name.toLowerCase() === contact.name.toLowerCase(),\r\n      )\r\n    ) {\r\n      toast(`${contact.name} is alresdy in contacts`, {\r\n        icon: '❗❗❗',\r\n        style: {\r\n          borderRadius: '10px',\r\n          background: '#333',\r\n          color: '#fff',\r\n        },\r\n      });\r\n      return;\r\n    } else\r\n      setContacts(\r\n        [...contacts, contact].sort((a, b) => a.name.localeCompare(b.name)),\r\n      );\r\n  };\r\n\r\n  const deleteContacs = contactId => {\r\n    setContacts(contacts.filter(contact => contact.id !== contactId));\r\n  };\r\n\r\n  const onFilterInputValue = e => setFilter(e.target.value);\r\n\r\n  const onFilteredContacts = () => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm onSubmit={addContact} />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter value={filter} onFilterInputValue={onFilterInputValue} />\r\n      <ContactList\r\n        contacts={onFilteredContacts()}\r\n        onDeleteContact={deleteContacs}\r\n      />\r\n      <Toaster position=\"top-right\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}